name: Main Foodgram Workflow

on:
  push:
    branches: [main]  # Запуск только для ветки main

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
      - name: Check out
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8==6.0.0 flake8-isort==6.0.0
          pip install -r ./backend/requirements.txt

      - name: Test with flake8
        run: |
          python -m flake8 backend/

  build_and_push_to_docker_hub:
    name: Push Backend Image
    runs-on: ubuntu-latest
    needs: tests  # Зависимость от тестов
    steps:
      - name: Check out
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
            ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:${{ github.sha }}

  build_frontend_and_push_to_docker_hub:
    name: Push Frontend Image
    runs-on: ubuntu-latest
    needs: tests  # Добавляем зависимость от тестов
    steps:
      - name: Check out
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: [build_and_push_to_docker_hub, build_frontend_and_push_to_docker_hub]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Transfer files via SCP
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "infra/*,docs/*,.env"  # Правильный формат для множества файлов
          target: "/home/${{ secrets.SSH_USERNAME }}/infra/"
          strip_components: 1  # Удаление лишних родительских директорий
          overwrite: true

      - name: Execute deployment commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            mkdir -p ~/infra
            cd ~/infra
          
            # Создаем .env из секретов
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" > .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
            echo "DB_HOST=db" >> .env
            echo "DB_PORT=5432" >> .env
            echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          
            # Docker commands
            docker compose down
            docker compose pull
            docker compose up -d --build
          
            sleep 20  # Ожидание инициализации БД
            docker compose exec backend python manage.py migrate
            docker compose exec backend python manage.py collectstatic --no-input

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Notify Telegram
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ✅ Деплой успешно завершен!
            Версия: ${{ github.sha }}
            Время: ${{ steps.deploy.outputs.current_time }}